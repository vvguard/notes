from llama_index.core import SimpleDirectoryReader, VectorStoreIndex
from llama_index.indices.struct_store import PandasIndex
from llama_index.agent import OpenAIAgent
from llama_index.core.tools import ToolMetadata

import pandas as pd

# 1. Load and index structured data
df = pd.read_csv("sales_data.csv")  # columns: product_name, revenue, units_sold, region
pandas_index = PandasIndex(df)
pandas_tool = pandas_index.as_query_engine()

# 2. Load and index unstructured customer feedback reports
docs = SimpleDirectoryReader("feedback_docs/").load_data()
vector_index = VectorStoreIndex.from_documents(docs)
vector_tool = vector_index.as_query_engine()

# 3. Create tools metadata
tools = [
    ToolMetadata(name="SalesDataAnalyzer", tool=pandas_tool, description="Query structured sales data"),
    ToolMetadata(name="CustomerFeedbackSearcher", tool=vector_tool, description="Search and summarize feedback documents")
]

# 4. Initialize agent with tools
agent = OpenAIAgent.from_tools(tools, verbose=True)

# 5. Run a complex query
query = """
Identify the top 3 products by total revenue from the sales data.
Then, for each product, summarize common themes from customer feedback reports.
Present the results as a ranked list with insights.
"""

response = agent.chat(query)
print(response)


!pip install llama-index llama-index-experimental

import logging
import sys
from IPython.display import Markdown, display

import pandas as pd
from llama_index.experimental.query_engine import PandasQueryEngine


logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))










from llama_index.core import PromptTemplate

query_engine = PandasQueryEngine(df=df, verbose=True)
prompts = query_engine.get_prompts()
print(prompts["pandas_prompt"].template)

print(prompts["response_synthesis_prompt"].template)

new_prompt = PromptTemplate(
    """\
You are working with a pandas dataframe in Python.
The name of the dataframe is `df`.
This is the result of `print(df.head())`:
{df_str}

Follow these instructions:
{instruction_str}
Query: {query_str}

Expression: """
)

query_engine.update_prompts({"pandas_prompt": new_prompt})


instruction_str = """\
1. Convert the query to executable Python code using Pandas.
2. The final line of code should be a Python expression that can be called with the `eval()` function.
3. The code should represent a solution to the query.
4. PRINT ONLY THE EXPRESSION.
5. Do not quote the expression.
"""




























