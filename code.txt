20. Valid Parentheses
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        
        maps = {')':'(', '}':'{',']':'['}
        
        for i in s:
            if i in maps:
                if stack and stack[-1] == maps[i]:
                    stack.pop()
                else:
                    return(False)
            else:
                stack.append(i)
        if len(stack) == 0:
            return(True)
        else:
            return(False)
            
            
  704. Binary Search          
 class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        l = 0
        r = len(nums) 
        if len(nums) == 0:
            return(-1)
        if nums[0] == target:
            return(0)
            
        while (l < r) and (r != l + 1) : 
            if target > nums[  (l + r) // 2 ]:
                l = (l + r) // 2 
            elif target < nums[  (l + r) // 2 ] :
                r = (l + r) // 2 
            elif target == nums[  (l + r) // 2 ]:
                return((l + r) // 2)
        return(-1)
           




49. Group Anagrams

class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        out = []
        def anagram(word1, word2, l1):
            if len(word1) == len(word2):
                dict1 = {key: 0 for key in word1}
                dict2 = {key: 0 for key in word2}
                for i in word1:
                    dict1[i] += 1
               
                for j in word2:
                    dict2[j] += 1
            
                if dict1 == dict2:
                    l1 = l1 + [word2]
                    return(l1)
                else:
                    return(l1)
            else:
                return(l1)
            
            
        while len(strs) != 0:
            l1 = [strs[0]]
   
            for i in strs[1:]:
          
                l1 = anagram(strs[0], i, l1)
                
                
                
         
            out = out + [list(l1 )]
            # print('-----')
            # print(l1)
            # print('-----')
            # print(out)
            # print('##########')
            for k in l1:
                strs.remove(k)
                 
        return(out)
            
        
 Top K Frequent Elements
 
 class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        
        def def_value():
            return 0
        res = defaultdict(def_value)
        
        l1 = []
        
        for i in nums:
            res[i] += 1
            
            
        for i  in range(k):
            p = max(res, key=res.get)
            l1 = l1 + [p]
            res[p] = 0
        return( l1 )
 
 
 
 
 238. Product of Array Except Self
 class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """

#         pre = [0] * len(nums)
#         prefix = 1
#         post = [0] * len(nums)
#         postfix = 1
        
#         for i in range(len(nums) ):
#             pre[i] = prefix
#             prefix  *= nums[i] 
            
#         for i in range( len(nums)-1, -1,-1):
#             post[i] = postfix
#             postfix  *= nums[i] 
#             print(nums[i])
#         print(pre)
        
#         print(post)
#         return([ i*j for i,j in zip(pre, post)])
        pre = [0] * len(nums)
        prefix = 1
        postfix = 1
        
        for i in range(len(nums) ):
            pre[i] = prefix
            prefix  *= nums[i] 
            
        for i in range( len(nums)-1, -1,-1):
            pre[i] = pre[i] * postfix
            postfix  *= nums[i] 
   

        return(pre)
        
        
        
    3. Longest Substring Without Repeating Characters
    class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        dict1= {}
        i = 0
        j = 1
        if len(s) == 0:
            return(0)
        maxc = 1
        dict1[s[0]] = 0
        while j < len(s):
            if s[j]  not in dict1.keys() or dict1[s[j]] < i:
                maxc = max( j-i +1  , maxc)

                # print(i)
                # print(j)
                # print(maxc)
                # print('---')
                dict1[s[j]] = j
                j +=1                
            else:
                
                i = dict1[s[j] ] +1
                dict1[s[j]] = j
                j  += 1
#                 print(i)
#                 print(j)
#                 print(dict1)
#                 print('^^^^')            
               
                
        return(maxc)






567. Permutation in String
class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        
        length = len(s1)
        
        l = 0
        r = length 
        
        dict1 = {}
        dict2 = {}
        for i in s1:
            dict1[i] = dict1.get(i,0) + 1 
        
        while r<= len(s2):
            dict2 = {}
            for j in s2[l:r]:
                dict2[j] = dict2.get(j,0) + 1 
                
            if dict2 == dict1:
                return(True)
            else:
                r += 1
                l +=1
                
        return(False)
