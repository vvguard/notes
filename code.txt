20. Valid Parentheses
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        
        maps = {')':'(', '}':'{',']':'['}
        
        for i in s:
            if i in maps:
                if stack and stack[-1] == maps[i]:
                    stack.pop()
                else:
                    return(False)
            else:
                stack.append(i)
        if len(stack) == 0:
            return(True)
        else:
            return(False)
            
            
  704. Binary Search          
 class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        l = 0
        r = len(nums) 
        if len(nums) == 0:
            return(-1)
        if nums[0] == target:
            return(0)
            
        while (l < r) and (r != l + 1) : 
            if target > nums[  (l + r) // 2 ]:
                l = (l + r) // 2 
            elif target < nums[  (l + r) // 2 ] :
                r = (l + r) // 2 
            elif target == nums[  (l + r) // 2 ]:
                return((l + r) // 2)
        return(-1)
           




49. Group Anagrams

class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        out = []
        def anagram(word1, word2, l1):
            if len(word1) == len(word2):
                dict1 = {key: 0 for key in word1}
                dict2 = {key: 0 for key in word2}
                for i in word1:
                    dict1[i] += 1
               
                for j in word2:
                    dict2[j] += 1
            
                if dict1 == dict2:
                    l1 = l1 + [word2]
                    return(l1)
                else:
                    return(l1)
            else:
                return(l1)
            
            
        while len(strs) != 0:
            l1 = [strs[0]]
   
            for i in strs[1:]:
          
                l1 = anagram(strs[0], i, l1)
                
                
                
         
            out = out + [list(l1 )]
            # print('-----')
            # print(l1)
            # print('-----')
            # print(out)
            # print('##########')
            for k in l1:
                strs.remove(k)
                 
        return(out)
            
        
