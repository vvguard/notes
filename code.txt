import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
import networkx as nx
import pandas as pd

# Define the Graph Attention Network class
class GAT(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, num_heads):
        super(GAT, self).__init__()
        self.num_heads = num_heads
        self.linear_layers = nn.ModuleList()
        self.linear_layers.append(nn.Linear(in_dim, hidden_dim))
        self.attention_layers = nn.ModuleList()
        for i in range(num_heads):
            self.attention_layers.append(nn.Linear(hidden_dim, 1))
        self.out_layer = nn.Linear(num_heads * hidden_dim, out_dim)

    def forward(self, x, adj):
        h = F.relu(self.linear_layers[0](x))
        attns = []
        for i in range(self.num_heads):
            attns.append(self.attention_layers[i](h))
        attns = torch.cat(attns, dim=1).view(-1, self.num_heads, adj.size()[0])
        attns = F.softmax(attns, dim=2)
        h_prime = torch.bmm(attns, h.unsqueeze(2)).squeeze()
        return self.out_layer(h_prime)

# Define a function to create the input features for the GAT model
def create_features(G):
    nodes = list(G.nodes())
    num_nodes = len(nodes)
    features = np.zeros((num_nodes, 3))
    for i in range(num_nodes):
        features[i,:] = nodes[i]
    return torch.FloatTensor(features)

# Define a function to create the adjacency matrix for the GAT model
def create_adjacency(G):
    return torch.FloatTensor(nx.to_numpy_matrix(G))

# Read in the data from a CSV file using Pandas
df = pd.read_csv('data.csv')

# Create a graph object using NetworkX
G = nx.Graph()
for index, row in df.iterrows():
    node = tuple(row)
    G.add_node(node)
    for prev_node in G.nodes:
        if prev_node != node:
            G.add_edge(prev_node, node, weight=1.0)

# Create the GAT model and set hyperparameters
in_dim = 3
hidden_dim = 16
out_dim = 8
num_heads = 4
model = GAT(in_dim, hidden_dim, out_dim, num_heads)

# Create the input features and adjacency matrix for the GAT model
features = create_features(G)
adj = create_adjacency(G)

# Run the model on the input data and print the node embeddings
node_embeddings = model(features, adj)
print("Node embeddings: ", node_embeddings.detach().numpy())
